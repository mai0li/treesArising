#include <stdio.h>
#include <stdlib.h>

/*
 * 
 * Implementar a Árvore de Sintaxe Abstrata da gramática abaixo:
 * 
 *  E -> E + T | T
 *  T -> T * F | F
 *  F -> D
 *  D -> 0 | 1 | ... | 9
 * 
 * Construir a árvore abstrata de expressão abaixo e realizar a avaliação da mesma
 * 
 * w = 2 + 3 * 4
 * 
 */

typedef enum OP { ADD, MUL }
    tipoOPERACAO;
    
typedef enum NO { OPERADOR, CONSTANTE }
    tipoNO;
    
struct no {
    
    struct no * esq;
    struct no * dir;
    tipoNO tipo_no;
    int valor;
    tipoOPERACAO operacao;
    
};

struct no * criarNoValor(int v);
struct no * criaNoOperador(struct no * e, tipoOPERACAO o, struct no * d);
void liberarMemoria(struct no* raiz);
int avaliarExpr(struct no *raiz);

struct no * exp;

int main()
{
    
    //Incluir codigo aqui
    
}

struct no * criarNoValor(int v) {
    struct no * no = emalloc (sizeof (struct no));
    no->tipoNO = CONSTANTE;
    no->valor = v;
    return no;
}

struct no * criaNoOperador(struct no * e, tipoOPERACAO o, struct no * d) {
    struct no * no = emalloc (sizeof (struct no));
    no->tipoNO = OPERADOR;
    no->esq = esq;
    no->dir = d;
    if (o == '+'){
        no->tipoOPERACAO = ADD;
    } else if (o == '*'){
        no->tipoOPERACAO = MUL;
    } else {
        printf("Erro de sintaxe! Caractere não reconhecido");
    }
    
    return no;
    
}

void liberarMemoria(struct no *raiz){
    //Incluir código
}

int avaliarExpr(struct no *raiz){
    //incluir código aqui!
    
    return 0;
}
